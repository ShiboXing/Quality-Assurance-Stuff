import org.junit.Test;
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.mockito.*;

public class GameTest {
	Game game;
	GameMain gm;
	
	Room _roomA;
	Room _roomB;
	Room _roomC;
	
	
	@Before
	public void setUp() throws Exception {
		
		_roomA=Mockito.mock(Room.class);
		_roomB=Mockito.mock(Room.class);
		_roomC=Mockito.mock(Room.class);
		game = new Game(_roomA);
	}
	
	@After
	public void tearDown() throws Exception {
		game=null;
		_roomA=null;
		_roomB=null;
		_roomC=null;
	}
	
	/*
	 * test if the constructor configures the variables correctly
	 */
	@Test
	public void testConstrutor()
	{
		game = new Game(_roomA);
	}
	
	// The room's item number should be correctly returned and displayed. If the item number is 
	// two then cream should be the item in the returned string statement.
	@Test
	public void testLook1() {
		Mockito.when(_roomA.getItem()).thenReturn(2);
		assertEquals(game.look(),"There might be something here...\nYou found some creamy cream!");
	}
	
	// If there is no item in the room then a string statement stating that nothing was found is correctly
	// returned. If the item number is -1 then a string statement affirming that nothing is in the room is returned.
	@Test
	public void testLook2() {
		Mockito.when(_roomA.getItem()).thenReturn(-1);
		assertEquals(game.look(),"You don't see anything out of the ordinary.");
	}
	
	// The room that the player is currently in is should be correctly returned. The player is in roomA so the 
	// returned room should be equal to roomA.
	@Test
	public void testGetRoom() {
		assertEquals(game.getRoom(),_roomA);
	}
	
	// When the player moves north, the northern room from the current room the player is in is returned. The northern room 
	// from roomA is roomB so when we move north the room returned from the method should be equal to roomB.
	@Test
	public void testMoveNorth1() {
		Mockito.when(_roomA.getNorth()).thenReturn(_roomB);
		assertEquals(game.moveNorth(),_roomB);
	}
	
	// When the player tries to move north when no room north exists then no movement happens and the current room should
	// be returned. No room exists to the north of roomA then the roomA should be returned.
	@Test
	public void testMoveNorth2() {
		Mockito.when(_roomA.getNorth()).thenReturn(null);
		assertEquals(game.moveNorth(),_roomA);
	}
	
	// When the player moves south, the southern room from the current room the player is in is returned. The southern room from
	// roomA is roomB so the room returned from the method should be equal to roomB.
	@Test
	public void testMoveSouth1() {

		Mockito.when(_roomA.getSouth()).thenReturn(_roomB);
		assertEquals(game.moveSouth(),_roomB);
	}
	
	//Added
	// When the player moves south when there is no room to the south no movement should happen and the original room should 
	// be returned.
	@Test
	public void testMoveSouth2() {

		Mockito.when(_roomA.getSouth()).thenReturn(null);
		assertEquals(game.moveSouth(),_roomA);
	}
	
	// When the player drinks with all items gathered a string should be returned saying the player has won.
	@Test
	public void testDrink1() {
		Mockito.when(_roomA.getItem()).thenReturn(0);
		game.look();
		Mockito.when(_roomA.getItem()).thenReturn(1);
		game.look();
		Mockito.when(_roomA.getItem()).thenReturn(2);
		game.look();
		assertEquals(game.drink(),"You drink the beverage and are ready to study!\nYou win!\nExiting with error code 0");
	}
	
	// When the player drinks with only coffee and sugar the string returned should say the player lost. It should also say
	// the player does not have the cream.
	@Test
	public void testDrink2() {
		Mockito.when(_roomA.getItem()).thenReturn(0);
		game.look();
		Mockito.when(_roomA.getItem()).thenReturn(1);
		game.look();
		assertEquals(game.drink(),"Without cream, you get an ulcer and cannot study.\nYou lose!\nExiting with error code 1");
	}
	
	// When the player drinks with only sugar and cream the string returned should say the player lost. It should also say 
	// that the player has sweetened cream but does not have the coffee.
	@Test
	public void testDrink3() {
		Mockito.when(_roomA.getItem()).thenReturn(1);
		game.look();
		Mockito.when(_roomA.getItem()).thenReturn(2);
		game.look();
		assertEquals(game.drink(),"You drink the sweetened cream, but without caffeine, you cannot study.\nYou lose!\nExiting with error code 1");
	}
	
	// When the player drinks with only cream the string returned should say the player lost. It should also say that the player
	// only has cream and not coffee.
	@Test
	public void testDrink4() {
		Mockito.when(_roomA.getItem()).thenReturn(2);
		game.look();
		assertEquals(game.drink(),"You drink the cream, but without caffeine, you cannot study.\nYou lose!\nExiting with error code 1");
	}
	
	//Added
	// When the player drinks with no items in their inventory a string should be returned saying that the player lost. It should
	// also say that the player has no coffee, sugar, or cream.
	@Test
	public void testDrink5() {
		assertEquals(game.drink(),"You drink the air, as you have no coffee, sugar, or cream.\nThe air is invigorating, but not invigorating enough.  You cannot study.\nYou lose!\nExiting with error code 1");
	}
	
	// The help function should give the player help by displaying their command options. A string should be returned with each
	// command and a brief description of what it does.
	@Test
	public void testHelp() {
		assertEquals(game.help(),"N - Go north\nS - Go South\nL - Look and collect any items in the room\nI - Show inventory of items collected\nD - Drink coffee made from items in the inventory");
	}
	
	// The inventory function should return which items the player has. Since the player only has the coffee and sugar, a string
	// should be returned saying that the player has coffee and sugar but no cream.
	@Test 
	public void testInventory() {
		Mockito.when(_roomA.getItem()).thenReturn(0);
		game.look();
		Mockito.when(_roomA.getItem()).thenReturn(1);
		game.look();
		assertEquals(game.inventory(),"You have a cup of delicious coffee."
				+ "\nYOU HAVE NO CREAM!\nYou have some tasty sugar.");
	}
	
	//Want to talk about
	// Adding a northern room should add a room to the very end of the linked list of rooms. After adding a room should then 
	// return that room.
	@Test
	public void testAddNorthRoom() {
		assertEquals(game.addRoomNorth(_roomB),_roomB);
	}
	
	// Displaying a room should return all of the important details about the room except if it has an item. The method should
	// return a string that contains the room's unique adjective, unique object, and the northern and southern doors if they exist.
	@Test
	public void testDisplayRoom() {
		Mockito.when(_roomA.getAdjective()).thenReturn("Sad");
		Mockito.when(_roomA.getObject()).thenReturn("Sad Object");
		Mockito.when(_roomA.getNorthDoor()).thenReturn("Sad");
		Mockito.when(_roomA.getSouthDoor()).thenReturn("Ultra Sad");
		
		assertEquals(game.displayRoom(),"You see a Sad room.\nIt has a Sad Object.\nA Sad door leads North.\nA Ultra Sad door leads South.");
	}
	
	@Test
	/*
	 * If the game runs without error, then runGame() will return true.
	 */
	public void testGameMain() {
		assertTrue(gm.runGame());
	}
	
}